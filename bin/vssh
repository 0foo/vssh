#!/usr/bin/env python3
import argparse, os
import nick_py_utils.file_system as file_util
import nick_py_utils.get_random_name as random_name
import nick_py_utils.cryptography as ssh_key_gen


VSSH_DIRECTORY=os.path.expanduser('~/.ssh/vssh')


parser = argparse.ArgumentParser(description="VSSH - SSH Key Management Tool")
subparsers = parser.add_subparsers(dest='command', required=True)

# Create subparser for the 'create' command
create_parser = subparsers.add_parser('create', help='Create a new SSH key folder')
create_parser.add_argument('ssh_connection_name', type=str, help='Folder name to create(no whitespace)', nargs='?', default=None)

# Create subparser for the 'list' command
list_parser = subparsers.add_parser('list', help='List all SSH key folders')

# Create subparser for the 'delete' command
delete_parser = subparsers.add_parser('delete', help='Delete an SSH key folder')
delete_parser.add_argument('ssh_connection_name', type=str, help='Folder name to delete')

help_parser = subparsers.add_parser('help', help='Help menu')

args = parser.parse_args()

def create():
    file_util.create_dir(VSSH_DIRECTORY)

    # create directory
    new_cx = ""
    if args.ssh_connection_name:
        new_cx = args.ssh_connection_name
    else:
        new_cx = random_name.get()
    cx_dir = VSSH_DIRECTORY + "/" + new_cx
    if file_util.path_exists(cx_dir):
        print("connection exists, exiting")
        exit()

    file_util.create_dir(cx_dir)

    # create ssh keys and add in the directory
    cx_keys = ssh_key_gen.gen_ssh_key_pair()

    file_util.write(
        f"{cx_dir}/{new_cx}.pub", 
        cx_keys["public"]
    )
    file_util.write(
        f"{cx_dir}/{new_cx}", 
        cx_keys["private"]
    )
    print(f"Created connection: {new_cx}")
    print(f"Key generated: {new_cx} and {new_cx}.pub")
    print(f"Private Key location:{cx_dir}/{new_cx}")
    print(f"Public Key location: {cx_dir}/{new_cx}.pub")
    print("SSH Public key")
    print("----------------------------")
    print(cx_keys["public"])

def list():
    dirs = file_util.get_directories(VSSH_DIRECTORY)
    if dirs:
        for dir in dirs:
            print(dir)
    else:
        print("No connections found")

def delete():
    if args.ssh_connection_name == "all":
        user_input = input("Deleting all connections, all you sure(y/n):")

        if user_input.lower() == "y":
            file_util.delete_path(VSSH_DIRECTORY) 
            file_util.create_dir(VSSH_DIRECTORY)
            print(f"Deleted all connections and associated directories.")
        exit()
    dir_to_delete = f"{VSSH_DIRECTORY}/{args.ssh_connection_name}"
    file_util.delete_path(dir_to_delete)
    print(f"Sucessfully deleted: {args.ssh_connection_name}")


if args.command == 'create':
    create()
elif args.command == 'list':
    list()
elif args.command == 'delete':
    delete()


if args.command == 'help' or args.command is None:
    out = """
        vssh <command> <connection> [options]

        vssh create [optional connection name]
            Created connection: optimistic-haibt
            Key Generated: optimistic-haibt and optimistic-haibt.pub
            SSH PUBLIC KEY
            ----------------------------
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCk5XpQuJc.....

        vssh list
            do-droplet-1
            jolly-haibt
            optimistic-wozniak
            aws-ec2-3kdf9

        vssh delete <connection name>
            Sucessfully deleted: elastic-hodgkin

    """
    print(out)
    exit()
